version: '3'

services:
  database:
    image: mongo
    container_name: 'app-database'
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${DATABASE_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${DATABASE_PASSWORD}
      - MONGO_INITDB_DATABASE='docker-monitoring'
    ports:
      - "27017:27017"
    volumes:
      - ./mongo-volume:/data/db
    restart: always
    networks:
      - monitoring-app
  redis:
    image: redis
    container_name: redis
    networks:
      - monitoring-app
  worker:
    build: ./docker/worker
    container_name: bull-worker
    volumes:
      - /etc/localtime:/etc/localtime
      - ./src:/usr/project/worker/src
      - /var/run/docker.sock:/var/run/docker.sock
      - ./package.json:/usr/project/worker/package.json
      - ./package-lock.json:/usr/project/worker/package-lock.json
      - ./tsconfig.json:/usr/project/worker/tsconfig.json
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
    networks:
      - monitoring-app
      - anomaly-network
    links:
      - redis
    depends_on:
      - database

  app:
    build: ./docker/api
    container_name: app
    volumes:
      - /etc/localtime:/etc/localtime
      - ./src:/usr/project/app/src
      - /var/run/docker.sock:/var/run/docker.sock
      - ./.env:/usr/project/app/.env
      - ./package.json:/usr/project/app/package.json
      - ./package-lock.json:/usr/project/app/package-lock.json
      - ./tsconfig.json:/usr/project/app/tsconfig.json
    ports:
      - "3000:80"
    links:
      - redis
      - database
    depends_on:
      - database
    networks:
      - monitoring-app
      - anomaly-network

networks:
  monitoring-app:
    driver: bridge
  anomaly-network:
    external: true
